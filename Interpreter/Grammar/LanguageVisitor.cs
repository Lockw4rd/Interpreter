//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="LanguageParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ILanguageVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPreprocessorDirective([NotNull] LanguageParser.PreprocessorDirectiveContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclaration([NotNull] LanguageParser.FunctionDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParamList([NotNull] LanguageParser.ParamListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParam([NotNull] LanguageParser.ParamContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] LanguageParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] LanguageParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] LanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] LanguageParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentList([NotNull] LanguageParser.ArgumentListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.varDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVarDeclaration([NotNull] LanguageParser.VarDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.ioStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIoStatement([NotNull] LanguageParser.IoStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionStatement([NotNull] LanguageParser.ExpressionStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] LanguageParser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.whileLoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileLoop([NotNull] LanguageParser.WhileLoopContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringExpr([NotNull] LanguageParser.StringExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>MulDivExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDivExpr([NotNull] LanguageParser.MulDivExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IdExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdExpr([NotNull] LanguageParser.IdExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberExpr([NotNull] LanguageParser.NumberExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RelExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelExpr([NotNull] LanguageParser.RelExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenExpr([NotNull] LanguageParser.ParenExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AddSubExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddSubExpr([NotNull] LanguageParser.AddSubExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalExpr([NotNull] LanguageParser.LogicalExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NegateExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNegateExpr([NotNull] LanguageParser.NegateExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FuncCallExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncCallExpr([NotNull] LanguageParser.FuncCallExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>CharExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCharExpr([NotNull] LanguageParser.CharExprContext context);
}
} // namespace Grammar
