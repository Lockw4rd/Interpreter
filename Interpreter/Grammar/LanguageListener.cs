//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ILanguageListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorDirective([NotNull] LanguageParser.PreprocessorDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorDirective([NotNull] LanguageParser.PreprocessorDirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] LanguageParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] LanguageParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParamList([NotNull] LanguageParser.ParamListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParamList([NotNull] LanguageParser.ParamListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam([NotNull] LanguageParser.ParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam([NotNull] LanguageParser.ParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] LanguageParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] LanguageParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] LanguageParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] LanguageParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] LanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] LanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] LanguageParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] LanguageParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] LanguageParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] LanguageParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.varDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVarDeclaration([NotNull] LanguageParser.VarDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.varDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVarDeclaration([NotNull] LanguageParser.VarDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.ioStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIoStatement([NotNull] LanguageParser.IoStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.ioStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIoStatement([NotNull] LanguageParser.IoStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] LanguageParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.expressionStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] LanguageParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] LanguageParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] LanguageParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.whileLoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileLoop([NotNull] LanguageParser.WhileLoopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.whileLoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileLoop([NotNull] LanguageParser.WhileLoopContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringExpr([NotNull] LanguageParser.StringExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringExpr([NotNull] LanguageParser.StringExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MulDivExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulDivExpr([NotNull] LanguageParser.MulDivExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MulDivExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulDivExpr([NotNull] LanguageParser.MulDivExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdExpr([NotNull] LanguageParser.IdExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdExpr([NotNull] LanguageParser.IdExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberExpr([NotNull] LanguageParser.NumberExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberExpr([NotNull] LanguageParser.NumberExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>RelExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelExpr([NotNull] LanguageParser.RelExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>RelExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelExpr([NotNull] LanguageParser.RelExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExpr([NotNull] LanguageParser.ParenExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExpr([NotNull] LanguageParser.ParenExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSubExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSubExpr([NotNull] LanguageParser.AddSubExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSubExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSubExpr([NotNull] LanguageParser.AddSubExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalExpr([NotNull] LanguageParser.LogicalExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalExpr([NotNull] LanguageParser.LogicalExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NegateExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNegateExpr([NotNull] LanguageParser.NegateExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NegateExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNegateExpr([NotNull] LanguageParser.NegateExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FuncCallExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncCallExpr([NotNull] LanguageParser.FuncCallExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FuncCallExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncCallExpr([NotNull] LanguageParser.FuncCallExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>CharExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCharExpr([NotNull] LanguageParser.CharExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>CharExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCharExpr([NotNull] LanguageParser.CharExprContext context);
}
} // namespace Grammar
